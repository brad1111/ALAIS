#/bin/bash
##Find RAM
TOTAL_RAM=2048
##End Find Ram
##Find UEFI
if [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Inc.' ]] || [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Computer, Inc.' ]]
    modprobe -r -q efivars || true #Only on a MAC computer
    else
    modprobe -q efivarfs
fi
UEFI=0 #Default is BIOS
if [[ -d "/sys/firmware/efi/" ]]; then
    ##Mount efivarfs if not already mounted
    if [[ -z $(mount | grep /sys/firmware/efi/efivarfs) ]]; then; mount -t efivarfs efivarfs /sys/firmware/efi/efivars
    UEFI=1
    echo Currently in UEFI mode
fi
##End Find UEFI
##Start PACMAN
is_package_installed() {
    for PKG in $PKG; do
        pacman -Q $CHKPKGS &> /dev/null && return 0;
    done
    return 1
}


package_install() { 
    for PKG in ${1}; do
        if ! is_package_installed "${PKG}" ; then
            pacman -S --noconfirm --needed ${PKG}
        fi
    done
}

##END PACMAN
check_connection() {
ping -q -w 1 -c 1 `ip r | grep default | awk 'NR==1 {print $3}'` &> /dev/null && return 1 || return 0
}
if check_connection(); then
    echo Please connect to a network
    read
    exit 1
fi

BOOL_AUTOINST=FALSE
if [[ -f `pwd`/autoinstall ]]; then #Checks for AutoInstall script for arch linux
    source autoinstall
fi
####Config Section
BOOL_MENUCOMPLETE=FALSE
##KEYMAP Section
while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
    if [[ $BOOL_AUTOINST == FALSE ]]; then
        clear
        echo What keymap do you want (DEFAULT=us):
        read -p "Keymap:" KEYMAP
        if [[ $KEYMAP == ]]; then
            KEYMAP=us
        fi
        BOOL_MENUCOMPLETE=TRUE
    else
        BOOL_MENUCOMPLETE=TRUE
    fi
done

if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo What editor do you want as default?
        read -p "Editor:" EDITOR
        if [[ $EDITOR == emacs ]]; then
            EMAC=emacs
            BOOL_MENUCOMPLETE=TRUE
        elif [[ $EDITOR == vim ]]; then
            VIM=vim
            BOOL_MENUCOMPLETE=TRUE
        elif [[ $EDITOR == zile ]]; then
            ZILE=zile
            BOOL_MENUCOMPLETE=TRUE
        elif [[ $EDITOR == nano ]]; then
        BOOL_MENUCOMPLETE=TRUE
        elif [[ $EDITOR == vi ]]; then
        BOOL_MENUCOMPLETE=TRUE
        else
        echo Please enter a valid answer
        read
        fi
    done
fi
package_install() "$EDITOR"

####No Mirror Conf Yet
#if [[ $BOOL_AUTOINST == FALSE ]]; then
#    BOOL_MENUCOMPLETE=FALSE
#    while [[ $BOOl_MENUCOMPLETE == FALSE ]]; do
#        
#    done
#fi


##Choose Device
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; then
        clear
        echo Showing all Devices
        lsblk
        echo Ending showing all devices
        echo --------------------------
        echo What device (hard drive letter a = disk 0) do you want to install to?
        read DEVICE
        if [[ $DEVICE == "/dev/sd"* ]]; then
            BOOL_MENUCOMPLETE=TRUE
        else
            echo Please enter a valid answer
            read
        fi
    done
 fi
 
 ######################Move ME!
# DEVICE_PARTITION_TABLE=NULL
# DEVICE_ESP=
# DEVICE_SWAP=
# DEVICE_ROOT=
# if [[ $BOOL_AUTOINST == FALSE ]]; then; partitioner=parted; fi
# partition_man()
# {
#     if [[ partitioner == parted ]]; then
#         if [[ %1 == mbr ]]; then
#             parted mklabel msdos
#             DEVICE_PARTITION_TABLE=msdos
#         elif [[ %1 == gpt ]]; then
#             parted mklabel gpt
#             DEVICE_PARTITION_TABLE=gpt
#         elif [[ %1 == esp ]]; then
#             parted mkpart primary fat32 512MB
#             DEVICE_ESP=/dev/sd{$device}1
#         elif [[ %1 == swap ]]; then
#             parted mkpart primary linux-swap $TOTAL_RAM
#             if [[ $DEVICE_ESP ]]; then; DEVICE_SWAP=/dev/sd{$device}1; else; DEVICE_SWAP=/dev/sd{$device}2; fi
#         elif [[ %1 == root ]]; then
#             parted mkpart primary ext4 100%
#             if [[ $DEVICE_SWAP == /dev/sd{$device}1 ]]; then; DEVICE_ROOT=/dev/sd{$device}2; elif [[ $DEVICE_SWAP == /dev/sd{$device}2 ]]; then; DEVICE_ROOT=/dev/sd{$device}3; else; echo An Error occured partitioning Root; read; exit 1; fi
#         fi
#     fi
# }
# 

##Choose Partition
#if [[ $BOOL_AUTOINST == FALSE ]]; then
#  BOOL_MENUCOMPLETE=FALSE 
#  while [[ $BOOL_MENUCOMPLETE == FALSE ]]; then
#        clear
#        ###UEFI Partition
#        if [[ UEFI == 1 ]]; then
#            partition_man "esp"
#       fi
#        partition_man "swap"
#        partition_man "root"
#        
#  done
#fi

if [[ $BOOL_AUTOINST == FALSE ]]; then
    if [[ -n $(dmidecode --type 1 | grep VirtualBox) ]]; then
        LTS=TRUE
    elif [[ -n $(dmidecode --type 1 | grep VMware) ]]; then
        LTS=TRUE
    fi
    if [[ !UEFI ]]; then
        FSTABTYPE=PARTUUID
    else
        FSTABTYPE=UUID
    fi
fi
####Config End
