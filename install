#!/bin/bash
#Find RAM
TOTAL_RAM=2048
UEFI=0 #Default is BIOS
##en d Find Ram
##Find UEFI
  check_boot_system() { ###From Helmuthdu/Aui
    if [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Inc.' ]] || [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Computer, Inc.' ]]; then
      modprobe -r -q efivars || true  # if MAC
    else
      modprobe -q efivarfs            # all others
    fi
    if [[ -d "/sys/firmware/efi/" ]]; then
      ## Mount efivarfs if it is not already mounted
      if [[ -z $(mount | grep /sys/firmware/efi/efivars) ]]; then
        mount -t efivarfs efivarfs /sys/firmware/efi/efivars
      fi
      UEFI=1
      echo "UEFI Mode detected"
    else
      UEFI=0
      echo "BIOS Mode detected"
    fi
  }
  check_boot_system
##en d Find UEFI
##Start PACMAN
is_package_installed() {
    for PKG in $PKG; do
        pacman -Q $CHKPKGS &> /dev/null && return 0;
    done
    return 1
}


package_install() { 
    for PKG in ${1}; do
        if ! is_package_installed "${PKG}" ; then
            pacman -S --noconfirm --needed ${PKG}
        fi
    done
}

##EN D  PACMAN
check_connection() {
ping -q -w 1 -c 1 `ip r | grep default | awk 'NR==1 {print $3}'` &> /dev/null && return 1 || return 0
}
if [[ check_connection == 0 ]]; then
    echo Please enable your network
    read
    exit 1
fi
  check_trim() {  ##Copied from helmuthdu/aui
    [[ -n $(hdparm -I /dev/sda | grep TRIM &> /dev/null) ]] && TRIM=1
  }
check_trim

##Copied from helmuthdu/aui (GPL 3.0)
    check_vga()
    {
        if [[ -n $(dmidecode --type 1 | grep VirtualBox) ]]; then
      echo Virtualbox
      VIDEO_DRIVER="virtualbox"
    elif [[ $_vga_length -eq 2 ]] && [[ -n $(echo ${_vga} | grep "nvidia") || -f /sys/kernel/debug/dri/0/vbios.rom ]]; then
      echo Bumblebee
      VIDEO_DRIVER="bumblebee"
    elif [[ -n $(echo ${_vga} | grep "nvidia") || -f /sys/kernel/debug/dri/0/vbios.rom ]]; then
      echo Nvidia
      read_input_text "Install NVIDIA proprietary driver" $PROPRIETARY_DRIVER
      if [[ $OPTION == y ]]; then
        VIDEO_DRIVER="nvidia"
      else
        VIDEO_DRIVER="nouveau"
      fi
    elif [[ -n $(echo ${_vga} | grep "advanced micro devices") || -f /sys/kernel/debug/dri/0/radeon_pm_info || -f /sys/kernel/debug/dri/0/radeon_sa_info ]]; then
      echo AMD/ATI
      VIDEO_DRIVER="ati"
    elif [[ -n $(echo ${_vga} | grep "intel corporation") || -f /sys/kernel/debug/dri/0/i915_capabilities ]]; then
      echo Intel
      VIDEO_DRIVER="intel"
    #Open-VM-Tools support by Thebradad1111 (Checks for VMWare drivers)
    elif [[ -n $(dmidecode --type 1 | grep VMware) ]]; then
      echo VMware
      VIDEO_DRIVER="openvmware"
    else
      echo VESA
      VIDEO_DRIVER="vesa"
    fi
    }   ##End of copied from aui

BOOL_AUTOINST=FALSE
if [[ -f `pwd`/autoinstall ]]; then #Checks for AutoInstall script for arch linux
    source autoinstall
fi

####Config Section
BOOL_MENUCOMPLETE=FALSE
##KEYMAP Section
while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
    if [[ $BOOL_AUTOINST == FALSE ]]; then
        clear
        echo What keymap do you want DEFAULT=us
        read -p "Keymap:" KEYMAP
        if [[ $KEYMAP == "" ]]; then
            KEYMAP=us
        fi
        BOOL_MENUCOMPLETE=TRUE
    else
        BOOL_MENUCOMPLETE=TRUE
    fi
	break
done

loadkeys $KEYMAP

if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo What editor do you want as default?
        read -p "Editor:" EDITOR
        if [[ $EDITOR == emacs ]]; then
            EMAC=emacs
            BOOL_MENUCOMPLETE=TRUE
        elif [[ $EDITOR == vim ]]; then
            VIM=vim
            BOOL_MENUCOMPLETE=TRUE
        elif [[ $EDITOR == zile ]]; then
            ZILE=zile
            BOOL_MENUCOMPLETE=TRUE
        elif [[ $EDITOR == nano ]]; then
        BOOL_MENUCOMPLETE=TRUE
        elif [[ $EDITOR == vi ]]; then
        BOOL_MENUCOMPLETE=TRUE
        else
        echo Please enter a valid answer
        read
        fi
    done
fi
package_install "$EDITOR"

####No Mirror Conf Yet
#if [[ $BOOL_AUTOINST == FALSE ]]; then
#    BOOL_MENUCOMPLETE=FALSE
#    while [[ $BOOl_MENUCOMPLETE == FALSE ]]; do
#        
#    done
#fi


##Choose Device
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo Showing all Devices
        lsblk
        echo "Ending showing all devices"
        echo --------------------------
        echo What device \(hard drive letter a = disk 0\) do you want to install to?
        read DEVICE
        if [[ $DEVICE == "/dev/sd"* ]]; then
            BOOL_MENUCOMPLETE=TRUE
        else
            echo Please enter a valid answer
            read
        fi
    done
 fi
 


##SetFstab
if [[ $BOOL_AUTOINST == FALSE ]]; then
    if [[ -n $(dmidecode --type 1 | grep VirtualBox) ]]; then
        LTS=TRUE
    elif [[ -n $(dmidecode --type 1 | grep VMware) ]]; then
        LTS=TRUE
    fi
    if [[ UEFI == 0 ]]; then
        FSTABTYPE=PARTUUID
    else
        FSTABTYPE=UUID
    fi
fi

##Language
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo What language do you want \(e.g. en_US or en_GB\)
        read language
        if [[ $language == *"_"* ]]; then
            BOOL_MENUCOMPLETE=TRUE
        else
            echo Please enter a valid language code
            read
        fi
    done
fi

##Timezone
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo What timezone do you want \(e.g. Europe/London, US/Pacific or UTC\)
        read timezone
        if [[ $timezone == */* ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == UTC ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == CET ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == CST6CDT ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Cuba ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == EET ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Egypt ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Eire ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == EST ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == EST5EDT ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Factory ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == GB ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == GB-Eire ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == "GMT"* ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Greenwich ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Hongkong ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == HST ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Iceland ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Iran ]]; then BOOL_MENUCOMPLETE=TRUE
        #elif [[ $timezone == iso3166.tab ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Israel ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Jamaica ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Japan ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Kwajalein ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Libya ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == MET ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == "MST"* ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Navajo ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == NZ ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == NZ-CHAT ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Poland ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Portugal ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == posixrules ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == PRC ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == PSR8PDT ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == ROC ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == ROK ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Singapore ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Turkey ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == UCT ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Universal ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == W-SU ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Zulu ]]; then BOOL_MENUCOMPLETE=TRUE
        else
            echo Please enter a valid timezone
            read
        fi
    done
fi

##Set hardware-clock
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo Please set the hardware clock \(UTC or Localtime\) \(UTC Recommended, Localtime if dualbooting with Windows\)
        read hwclockvar
        if [[ $hwclockvar == UTC ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $hwclockvar == Localtime ]]; then BOOL_MENUCOMPLETE=TRUE
        else
            echo Please enter a valid hwclock value
            read
        fi
    done
fi

##Hostname
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo Please set the hostname for your new system
        read hostname
        break
    done
fi

##Network manager thing
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo Please set your network manager \(Networkmanager, Connman, or Wicd\)
        read networkman
        if [[ $networkman == Networkmanager ]]; then break
        $networkman=networkmanager
        elif [[ $networkman == ConnMan ]]; then break
        $networkman=connman
        elif [[ $networkman == Wicd ]]; then break
        $networkman=wicd
        else
            echo Please enter a valid network manager
            read
        fi
    done
fi

##Password (PLEASE BE TEMPORARY) For now
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo Please enter a TEMPORARY password that you will change later whilst you are logged in \(this is because it is insecure\)
        read password
        break
    done
fi


##Octopi Setup for POST Config Wizard
Octopi()
{
    clear
    echo Do you want to install octopi \(pacman in gui form made in qt\) \[Y/N\]?
    local octopiYN
    read octopiYN
    if [[ $octopiYN == Y ]]; then
        BOOL_OCTOPI=TRUE
    elif [[ $octopiYN == N ]]; then
        BOOL_OCTOPI=FALSE
    else
        echo Please enter a valid answer
        read
    fi
}

##Post Config Wizard
#Same as below but w/o wizard
PConfPKGS()
{
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        CUSTOMPKGS=
        AURCUSTOMPKGS=
        echo What applications do you want to install \(e.g. application1 application2 etc.\) \[PACMAN\]
        read CUSTOMPKGS
        echo What applications do you want to install \(e.g. application application etc.\) \[AUR\]
        read AURCUSTOMPKGS
    done
}
PConfWiz()
{
    #BasicSetup
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local basicsetupYN
        echo Do you want basic setup \(bc, rsync, mlocate bash-completeion pkgstats, ntp, avahi, alsa, pulseaudio, file systems\) \[Y/N\]
        read basicsetup
        if [[ $basicsetup == Y ]]; then
            BOOL_BASICSETUP=TRUE
            break
        elif [[ $basicsetup == N ]]; then
            BOOL_BASICSETUP=FALSE
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    #SSH
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local sshYN
        echo Do you want SSH? \[Y/N\]
        read sshYN
        if [[ $sshYN == Y ]]; then
            BOOL_SSH=TRUE
            break
        elif [[ $sshYN == N ]]; then
            BOOL_SSH=FALSE
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    #NFS
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local nfsYN
        echo Do you want NFS? \[Y/N\]
        read nfsYN
        if [[ $nfsYN == Y ]]; then
            BOOL_NFS=TRUE
            break
        elif [[ $nfsYN == N ]]; then
            BOOL_NFS=FALSE
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    #Samba
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local sambaYN
        echo Do you want Samba? \[Y/N\]
        read sambaYN
        if [[ $sambaYN == Y ]]; then
            BOOL_SAMBA=TRUE
            break
        elif [[ $sambaYN == N ]]; then
            BOOL_SAMBA=FALSE
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    #Readahead
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local readaheadYN
        echo Do you want Readahead? \[Y/N\]
        read readaheadYN
        if [[ $readaheadYN == Y ]]; then
            BOOL_READAHEAD=TRUE
            break
        elif [[ $readaheadYN == N ]]; then
            BOOL_READAHEAD=FALSE
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    #Fontconfig
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local fontconfigOPTION
        echo What fontconfig \[Normal, Infinality, Ubuntu\] \[1,2,3\]
        read fontconfigOPTION
        if [[ $fontconfigOPTION == 1 ]]; then
            BOOL_FONTCONFIG=NORM
            break
        elif [[ $fontconfigOPTION == 2 ]]; then
            BOOL_FONTCONFIG=INF
            break
        elif [[ $fontconfigOPTION == 3 ]]; then
            BOOL_FONTCONFIG=UBUNTU
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    #XORG
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local xorgYN
        echo Do you want XORG \(required for a gui\)? \[Y/N\]
        read xorgYN
        if [[ $xorgYN == Y ]]; then
            BOOL_XORG=TRUE
            break
        elif [[ $xorgYN == N ]]; then
            BOOL_XORG=FALSE
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    check_vga
    ##CUPS
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local cupsYN
        echo Do you want CUPS \(printing support\)?
        read cupsYN
        if [[ $cupsYN == Y ]]; then
            BOOL_CUPS=TRUE
            break
        elif [[ $cupsYN == N ]]; then
            BOOL_CUPS=FALSE
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    ##WM/DE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        if [[ $BOOL_XORG == TRUE ]]; then
            clear
            local deYN
            echo Do you want a desktop enironment/window manager \(gnome, kde etc./openbox, i3 etc.\)
            read deYN
            if [[ deYN == Y ]]; then
                local BOOL_2NDMENUCOMPLETE=FALSE
                while [[ $BOOL_2NDMENUCOMPLETE == FALSE ]]; do
                    clear
                    echo Please select a desktop environment or window manager
                    echo -----------------------------------------------------
                    echo Desktop Environment:   Window Manager:
                    echo 1. Cinnamon            9. Awesome
                    echo 2. Enlightenment       10. Fluxbox
                    echo 3. GNOME               11. i3
                    echo 4. KDE                 12. OpenBox
                    echo 5. LXDE                13. Xmonad
                    echo 6. LXQT
                    echo 7. MATE
                    echo 8. XFCE
                    echo -----------------------------------------------------
                    echo Please select a number from 1-13:
                    local wm
                    read wm
                    if [[ $wm == 1 ]]; then
                        DESKTOP_ENV=Cinnamon
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 2 ]]; then
                        DESKTOP_ENV=Enlightenment
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 3 ]]; then
                        DESKTOP_ENV=GNOME
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 4 ]]; then
                        DESKTOP_ENV=KDE
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 5 ]]; then
                        DESKTOP_ENV=LXDE
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 6 ]]; then
                        DESKTOP_ENV=LXQT
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 7 ]]; then
                        DESKTOP_ENV=MATE
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 8 ]]; then
                        DESKTOP_ENV=XFCE
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 9 ]]; then
                        DESKTOP_ENV=Awesome
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 10 ]]; then
                        DESKTOP_ENV=Fluxbox
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 11 ]]; then
                        DESKTOP_ENV=i3
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 12 ]]; then
                        DESKTOP_ENV=Openbox
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 13 ]]; then
                        DESKTOP_ENV=Xmonad
                        BOOL_2NDMENUCOMPLETE=TRUE
                    else
                        echo Please enter a valid number [1-13]
                        read
                    fi
                done
                break
            elif [[ deYN == N ]]; then
                break
            fi
        else
            break
        fi
    done
    ##Todo add different DM support
    if [[ $DESKTOP_ENV == KDE ]]; then
        DISPLAY_MAN=lightdm lightdm-kde-greeter
    elif [[ $DESKTOP_ENV == LXQT ]]; then
        DISPLAY_MAN=lightdm lightdm-kde-greeter
    elif [[ $DESKTOP_ENV == "" ]]; then #NO DESKTOP ENVIRONMENT
        DISPLAY_MAN=
    else
        DISPLAY_MAN=lightdm lightdm-gtk-greeter
    fi
    


    
    
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        if [[ $DESKTOP_ENV == "" ]]; then
            break
        elif [[ $DESKTOP_ENV == KDE ]] || [[ $DESKTOP_ENV == LXQT ]]; then
            octopi
            if [[ $BOOL_OCTOPI == TRUE ]] || [[ $BOOL_OCTOPI == FALSE ]]; then
                break
            fi
        else
            clear
            echo Do you want to install pacman \(pacman in gui form made in gtk+/vala\) \[Y/N\]?
            local pamacYN
            read pamacYN
            if [[ $pamacYN == Y ]]; then
                BOOL_PAMAC=TRUE
                break
            elif [[ $pamacYN == N ]]; then
                BOOL_PAMAC=FALSE
                break
            else
                echo Please enter a valid answer
                read
            fi
        fi
    done
    
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local plymouthYN
        echo Do you want to install Plymouth? \(A boot-screen/boot-splash\) \[Y/N\]
        read plymouthYN
        if [[ $plymouthYN == Y ]]; then
            BOOL_PLYMOUTH=TRUE
            PLYMOUTH_THEME=SPINFINITY
            PLYMOUTH_VARIANT=-legacy
            break
        elif [[ $plymouthYN == N ]]; then
            BOOL_PLYMOUTH=FALSE
            break
        else
            echo Please enter a valid answer
            read
        fi
    done
    
    
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local MorePKGSYN
        echo Do you want to add more packages after install? \[Y/N\]
        read MorePKGSYN
        if [[ $MorePKGSYN == TRUE ]]; then
            PConfPKGS
        fi
    done
}



##Post config
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo Do you want to use a wizard to setup post-install, or just choose the applications? \[Y/N\]
        read temp_postconfig
        if [[ $temp_postconfig == Y ]]; then
            PConfWiz
            break
        elif [[ $temp_postconfig == N ]]; then
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
fi

####Config en d
####Installation Start
# DEVICE_PARTITION_TABLE=NULL
# DEVICE_ESP=
# DEVICE_SWAP=
# DEVICE_ROOT=
# if [[ $BOOL_AUTOINST == FALSE ]]; then partitioner=parted; fi
# partition_man()
# {
#     if [[ $partitioner == parted ]]; then
#         if [[ %{1} == msdos ]]; then
#             parted $DEVICE mklabel msdos
#             DEVICE_PARTITION_TABLE=msdos
#             
#         elif [[ %{1} == gpt ]]; then
#             parted $DEVICE mklabel gpt
#             DEVICE_PARTITION_TABLE=gpt
#         elif [[ %{1} == esp ]]; then
#             parted $DEVICE mkpart primary fat32 2M 512M
#             DEVICE_ESP={$DEVICE}1
#         elif [[ %{1} == swap ]]; then
#             parted $DEVICE mkpart primary linux-swap 513M $TOTAL_RAM
#             if [[ $DEVICE_ESP == "" ]]; then DEVICE_SWAP={$DEVICE}1; else DEVICE_SWAP={$DEVICE}2; fi
#         elif [[ %{1} == root ]]; then
#             parted $DEVICE mkpart primary ext4 100%
#             if [[ $DEVICE_SWAP == {$DEVICE}1 ]]; then DEVICE_ROOT={$DEVICE}2; elif [[ $DEVICE_SWAP == {$DEVICE}2 ]]; then DEVICE_ROOT={$DEVICE}3; else echo An Error occured partitioning Root; read; exit 1; fi
#             if [[ $DEVICE_PARTITION_TABLE == msdos ]] && [[ $UEFI == 0 ]]; then
#                 parted $DEVICE set 2 boot on #MBR BOOTABLE PARITITON
#             fi
#         fi
#     fi
# }
# 
# 
# #Choose Partition ##NO current support for BIOS/gpt + grub
# #if [[ $BOOL_AUTOINST == FALSE ]]; then
#  BOOL_MENUCOMPLETE=FALSE 
#  while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
#        clear
#        ###Later enable BIOS boot partition etc
#        ###UEFI Partition
#         if [[ $UEFI == 1 ]]; then
#            partition_man "gpt"
#            partition_man "esp"
#         else
#            partition_man "msdos"
#         fi
#        partition_man "swap"
#        partition_man "root"
#        break
#  done
# #fi

if [[ $UEFI == 1 ]]; then
    parted $DEVICE mklabel gpt
    DEVICE_PARTITION_TABLE=gpt
    parted $DEVICE mkpart primary fat32 2M 512M
    DEVICE_ESP=${DEVICE}1
else
    parted $DEVICE mklabel msdos
    DEVICE_PARTITION_TABLE=msdos
fi
parted $DEVICE mkpart primary linux-swap 513M $TOTAL_RAM
if [[ $DEVICE_ESP == ${DEVICE}1 ]]; then
    DEVICE_SWAP=${DEVICE}2
else
    DEVICE_SWAP=${DEVICE}1
fi
parted $DEVICE mkpart primary ext4 $TOTAL_RAM 100%
if [[ $DEVICE_SWAP == ${DEVICE}1 ]]; then
    DEVICE_ROOT=${DEVICE}2
elif [[ $DEVICE_SWAP == ${DEVICE}2 ]]; then
    DEVICE_ROOT=${DEVICE}3
else
    echo An Error occured partitioning Root
    read
    exit 1
fi




echo "Past partman" >> ~/log
##Create partitions
if [[ $TRIM == 1 ]]; then temptrimcommand="-E discard"; fi
mkswap $DEVICE_SWAP
swapon $DEVICE_SWAP
if [[ $UEFI == 1 ]]; then mkfs.fat -F32 $DEVICE_ESP; fi
mkfs.ext4 $DEVICE_ROOT $temptrimcommand
echo "Past mkfs etc" >> ~/log

mount $DEVICE_ROOT /mnt
if [[ $UEFI == 1 ]]; then
    mkdir /mnt/boot
    mount $DEVICE_ESP /mnt/boot
fi

echo "Past mounting" >> ~/log




pacstraptodo="base base-devel $networkman grub os-prober efibootmgr dosfstools dkms"
if [[ $LTS == TRUE ]]; then
    pacstraptodo="$pacstraptodo linux-lts linux-lts-headers"
else
    pacstraptodo="$pacstraptodo linux-headers"
fi

pacstrap /mnt $pacstraptodo
read
echo "Past pacstrap" >> ~/log

if [[ ! $language == en_US ]]; then echo $language.UTF-8 UTF-8 >> /mnt/etc/locale.gen; fi
echo en_US.UTF-8 UTF-8 >> /mnt/etc/locale.gen



arch-chroot /mnt locale-gen



echo LANG=$language > /mnt/etc/locale.conf
echo KEYMAP=$keymap > /mnt/etc/vconsole.conf

echo "Past language + Keymap" >> ~/log

arch-chroot /mnt ln -s /usr/share/zoneinfo/$timezone /etc/localtime
arch-chroot /mnt hwclock --$hwclockvar --systohc

echo "Past clock stuff" >> ~/log

echo $hostname > /mnt/etc/hostname
arch-chroot /mnt sed -i '/127.0.0.1/s/$/ '${host_name}'/' /etc/hosts
arch-chroot /mnt sed -i '/::1/s/$/ '${host_name}'/' /etc/hosts

echo "Past hostname" >> ~/log

if [[ $LTS == TRUE ]]; then
    arch-chroot /mnt pacman -Rs --noconfirm linux
    arch-chroot /mnt mkinitcpio -p linux-lts
else
    arch-chroot /mnt mkinitcpio -p linux
fi

echo "Past mkinitcpio" >> ~/log

if [[ $UEFI == 1 ]]; then
    arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=arch-linux
else
    arch-chroot /mnt grub-install --target=i386-pc $device
fi
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
echo "Past grub" >> ~/log
arch-chroot /mnt passwd <<EOF
"$password"
"$password"
EOF

echo "Past passwd" >> ~/log

arch-chroot /mnt systemctl enable $networkman
if [[ $DEVICE_ESP == "" ]]; then
    echo &> /dev/null
else
    umount -R /mnt/boot
fi
umount -R /mnt
swapoff $DEVICE_ROOT

echo "Finished " >> ~/log

systemctl reboot
##en d of install
##Todo add config stuff
