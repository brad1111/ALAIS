#!/bin/bash
##Find RAM Section
TOTAL_RAM=2048 #Ram detection not yet implemented
UEFI=0 #Sets the default Firmware to be BIOS. In case detection fails for some reason.
user=user #Sets the default user to user if not supplied
BOOL_BIOS_GPT=FALSE #Not yet implemented
#BOOL_UEFI_MBR=FALSE ||| UEFI_MBR Support cancelled
FORMAT_ROOT_TYPE=ext4 #Set default root format to be ext4 for compatability and ease of use. Can be changed with autoinst script
##end of Find Ram Section
##Find UEFI Section
  check_boot_system() { ###Copied From Helmuthdu/Aui (GPL3)
    if [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Inc.' ]] || [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Computer, Inc.' ]]; then
      modprobe -r -q efivars || true  # if MAC
    else
      modprobe -q efivarfs            # all others
    fi
    if [[ -d "/sys/firmware/efi/" ]]; then
      ## Mount efivarfs if it is not already mounted
      if [[ -z $(mount | grep /sys/firmware/efi/efivars) ]]; then
        mount -t efivarfs efivarfs /sys/firmware/efi/efivars
      fi
      UEFI=1
      echo "UEFI Mode detected"
    else
      UEFI=0
      echo "BIOS Mode detected"
    fi
  }
  check_boot_system
  sleep 1
##end of Find UEFI Section

check_connection() { ###Copied From Helmuthdu/Aui (GPL3) ||| to check to see if the user has internet connection
ping -q -w 1 -c 1 `ip r | grep default | awk 'NR==1 {print $3}'` &> /dev/null && return 1 || return 0
}
if [[ check_connection == 0 ]]; then
    echo Please enable your network
    read
    exit 1
fi
  check_trim() {  ###Copied from helmuthdu/aui (GPL3) ||| to check to see if the user has an SSD and enable SSD trim later
    [[ -n $(hdparm -I /dev/sda | grep TRIM &> /dev/null) ]] && TRIM=1
  }
check_trim

BOOL_AUTOINST=FALSE #To set autoinst script off as default
if [[ -f `pwd`/autoinstall ]]; then #Checks for AutoInstall script for this application then uses that script
    source autoinstall
fi

####Config Section (Skipped with Autoinst) [Todo Commenting]
BOOL_MENUCOMPLETE=FALSE
##KEYMAP Section
while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
    if [[ $BOOL_AUTOINST == FALSE ]]; then
        clear
        echo What keymap do you want DEFAULT=us
        read -p "Keymap:" KEYMAP
        if [[ $KEYMAP == "" ]]; then
            KEYMAP=us
        fi
        BOOL_MENUCOMPLETE=TRUE
    else
        BOOL_MENUCOMPLETE=TRUE
    fi
	break
done

loadkeys $KEYMAP

if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo What editor do you want as default?
        read -p "Editor:" EDITOR
        if [[ $EDITOR == emacs ]]; then
            EMAC=emacs
            BOOL_MENUCOMPLETE=TRUE
        elif [[ $EDITOR == vim ]]; then
            VIM=vim
            BOOL_MENUCOMPLETE=TRUE
        elif [[ $EDITOR == zile ]]; then
            ZILE=zile
            BOOL_MENUCOMPLETE=TRUE
        elif [[ $EDITOR == nano ]]; then
        BOOL_MENUCOMPLETE=TRUE
        elif [[ $EDITOR == vi ]]; then
        BOOL_MENUCOMPLETE=TRUE
        else
        echo Please enter a valid answer
        read
        fi
    done
fi
package_install "$EDITOR"

####No Mirror Conf Yet
#if [[ $BOOL_AUTOINST == FALSE ]]; then
#    BOOL_MENUCOMPLETE=FALSE
#    while [[ $BOOl_MENUCOMPLETE == FALSE ]]; do
#        
#    done
#fi


##Choose Device
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo Showing all Devices
        lsblk
        echo "Ending showing all devices"
        echo "--------------------------"
        echo What device \(hard drive letter a = disk 0\) do you want to install to?
        read DEVICE
        if [[ $DEVICE == "/dev/sd"* ]]; then
            BOOL_MENUCOMPLETE=TRUE
        else
            echo Please enter a valid answer
            read
        fi
    done
 fi
 


##SetFstab

    if [[ -n $(dmidecode --type 1 | grep VirtualBox) ]]; then
        LTS=TRUE
    elif [[ -n $(dmidecode --type 1 | grep VMware) ]]; then
        LTS=TRUE
    fi
    if [[ UEFI == 0 ]]; then
        FSTABTYPE=PARTUUID
    else
        FSTABTYPE=UUID
    fi


##Language
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo What language do you want \(e.g. en_US or en_GB\)
        read language
        if [[ $language == *"_"* ]]; then
            BOOL_MENUCOMPLETE=TRUE
        else
            echo Please enter a valid language code
            read
        fi
    done
fi

##Timezone
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo What timezone do you want \(e.g. Europe/London, US/Pacific or UTC\)
        read timezone
        if [[ $timezone == */* ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == UTC ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == CET ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == CST6CDT ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Cuba ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == EET ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Egypt ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Eire ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == EST ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == EST5EDT ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Factory ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == GB ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == GB-Eire ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == "GMT"* ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Greenwich ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Hongkong ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == HST ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Iceland ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Iran ]]; then BOOL_MENUCOMPLETE=TRUE
        #elif [[ $timezone == iso3166.tab ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Israel ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Jamaica ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Japan ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Kwajalein ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Libya ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == MET ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == "MST"* ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Navajo ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == NZ ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == NZ-CHAT ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Poland ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Portugal ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == posixrules ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == PRC ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == PSR8PDT ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == ROC ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == ROK ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Singapore ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Turkey ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == UCT ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Universal ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == W-SU ]]; then BOOL_MENUCOMPLETE=TRUE
        elif [[ $timezone == Zulu ]]; then BOOL_MENUCOMPLETE=TRUE
        else
            echo Please enter a valid timezone
            read
        fi
    done
fi

##Set hardware-clock
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo Please set the hardware clock \(UTC or Localtime\) \(UTC Recommended, Localtime if dualbooting with Windows\)
        read hwclockvar
        if [[ $hwclockvar == UTC ]]; then
        hwclockvar=utc
        break
        elif [[ $hwclockvar == Localtime ]]; then
        hwclockvar=localtime
        break
        else
            echo Please enter a valid hwclock value
            read
        fi
    done
fi

##Hostname
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo Please set the hostname for your new system
        read hostname
        break
    done
fi

##Network manager thing
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo Please set your network manager \(Networkmanager, Connman, or Wicd\)
        read networkman
        if [[ $networkman == Networkmanager ]]; then
        $networkman=networkmanager
        break
        elif [[ $networkman == Connman ]]; then
        $networkman=connman
        break
        elif [[ $networkman == Wicd ]]; then
        $networkman=wicd
        break
        else
            echo Please enter a valid network manager
            read
        fi
    done
fi

##Password (PLEASE BE TEMPORARY) For now
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo Please enter a TEMPORARY password that you will change later whilst you are logged in \(this is because it is insecure\)
        read password
        break
    done
fi


##Octopi Setup for POST Config Wizard
Octopi()
{
    clear
    echo Do you want to install octopi \(pacman in gui form made in qt\) \[Y/N\]?
    local octopiYN
    read octopiYN
    if [[ $octopiYN == Y ]]; then
        BOOL_OCTOPI=TRUE
    elif [[ $octopiYN == N ]]; then
        BOOL_OCTOPI=FALSE
    else
        echo Please enter a valid answer
        read
    fi
}

##Post Config Wizard
#Same as below but w/o wizard
PConfPKGS()
{
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        CUSTOMPKGS=
        AURCUSTOMPKGS=
        echo What applications do you want to install \(e.g. application1 application2 etc.\) \[PACMAN\]
        read CUSTOMPKGS
        echo What applications do you want to install \(e.g. application application etc.\) \[AUR\]
        read AURCUSTOMPKGS
    done
}
PConfWiz()
{
    #BasicSetup
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local basicsetupYN
        echo Do you want basic setup \(bc, rsync, mlocate bash-completeion pkgstats, ntp, avahi, alsa, pulseaudio, file systems\) \[Y/N\]
        read basicsetup
        if [[ $basicsetup == Y ]]; then
            BOOL_BASICSETUP=TRUE
            break
        elif [[ $basicsetup == N ]]; then
            BOOL_BASICSETUP=FALSE
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    #SSH
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local sshYN
        echo Do you want SSH? \[Y/N\]
        read sshYN
        if [[ $sshYN == Y ]]; then
            BOOL_SSH=TRUE
            break
        elif [[ $sshYN == N ]]; then
            BOOL_SSH=FALSE
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    #NFS
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local nfsYN
        echo Do you want NFS? \[Y/N\]
        read nfsYN
        if [[ $nfsYN == Y ]]; then
            BOOL_NFS=TRUE
            break
        elif [[ $nfsYN == N ]]; then
            BOOL_NFS=FALSE
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    #Samba
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local sambaYN
        echo Do you want Samba? \[Y/N\]
        read sambaYN
        if [[ $sambaYN == Y ]]; then
            BOOL_SAMBA=TRUE
            break
        elif [[ $sambaYN == N ]]; then
            BOOL_SAMBA=FALSE
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    #Readahead
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local readaheadYN
        echo Do you want Readahead? \[Y/N\]
        read readaheadYN
        if [[ $readaheadYN == Y ]]; then
            BOOL_READAHEAD=TRUE
            break
        elif [[ $readaheadYN == N ]]; then
            BOOL_READAHEAD=FALSE
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    #Fontconfig
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local fontconfigOPTION
        echo What fontconfig \[Normal, Infinality, Ubuntu\] \[1,2,3\]
        read fontconfigOPTION
        if [[ $fontconfigOPTION == 1 ]]; then
            FONTCONFIG=NORM
            break
        elif [[ $fontconfigOPTION == 2 ]]; then
            FONTCONFIG=INF
            break
        elif [[ $fontconfigOPTION == 3 ]]; then
            FONTCONFIG=UBUNTU
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    #XORG
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local xorgYN
        echo Do you want XORG \(required for a gui\)? \[Y/N\]
        read xorgYN
        if [[ $xorgYN == Y ]]; then
            BOOL_XORG=TRUE
            break
        elif [[ $xorgYN == N ]]; then
            BOOL_XORG=FALSE
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    check_vga
    ##CUPS
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local cupsYN
        echo Do you want CUPS \(printing support\)?
        read cupsYN
        if [[ $cupsYN == Y ]]; then
            BOOL_CUPS=TRUE
            break
        elif [[ $cupsYN == N ]]; then
            BOOL_CUPS=FALSE
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
    ##WM/DE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        if [[ $BOOL_XORG == TRUE ]]; then
            clear
            local deYN
            echo Do you want a desktop enironment/window manager \(gnome, kde etc./openbox, i3 etc.\)
            read deYN
            if [[ deYN == Y ]]; then
                local BOOL_2NDMENUCOMPLETE=FALSE
                while [[ $BOOL_2NDMENUCOMPLETE == FALSE ]]; do
                    clear
                    echo Please select a desktop environment or window manager
                    echo -----------------------------------------------------
                    echo Desktop Environment:   Window Manager:
                    echo 1. Cinnamon            9. Awesome
                    echo 2. Enlightenment       10. Fluxbox
                    echo 3. GNOME               11. i3
                    echo 4. KDE                 12. OpenBox
                    echo 5. LXDE                13. Xmonad
                    echo 6. LXQT
                    echo 7. MATE
                    echo 8. XFCE
                    echo -----------------------------------------------------
                    echo Please select a number from 1-13:
                    local wm
                    read wm
                    if [[ $wm == 1 ]]; then
                        DESKTOP_ENV=Cinnamon
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 2 ]]; then
                        DESKTOP_ENV=Enlightenment
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 3 ]]; then
                        DESKTOP_ENV=GNOME
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 4 ]]; then
                        DESKTOP_ENV=KDE
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 5 ]]; then
                        DESKTOP_ENV=LXDE
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 6 ]]; then
                        DESKTOP_ENV=LXQT
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 7 ]]; then
                        DESKTOP_ENV=MATE
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 8 ]]; then
                        DESKTOP_ENV=XFCE
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 9 ]]; then
                        DESKTOP_ENV=Awesome
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 10 ]]; then
                        DESKTOP_ENV=Fluxbox
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 11 ]]; then
                        DESKTOP_ENV=i3
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 12 ]]; then
                        DESKTOP_ENV=Openbox
                        BOOL_2NDMENUCOMPLETE=TRUE
                    elif [[ $wm == 13 ]]; then
                        DESKTOP_ENV=Xmonad
                        BOOL_2NDMENUCOMPLETE=TRUE
                    else
                        echo Please enter a valid number [1-13]
                        read
                    fi
                done
                break
            elif [[ deYN == N ]]; then
                break
            fi
        else
            break
        fi
    done
    ##Todo add different DM support
    DISPLAY_MAN_GREETER=
    if [[ $DESKTOP_ENV == KDE ]]; then
        DISPLAY_MAN=sddm
    elif [[ $DESKTOP_ENV == LXQT ]]; then
        DISPLAY_MAN=sddm
    elif [[ $DESKTOP_ENV == "" ]]; then #NO DESKTOP ENVIRONMENT
        DISPLAY_MAN=
    elif [[ $DESKTOP_ENV == GNOME ]]; then
        DISPLAY_MAN=gdm
    elif [[ $DESKTOP_ENV == LXDE ]]; then
        DISPLAY_MAN=lxdm
    else
        DISPLAY_MAN=lightdm
        DISPLAY_MAN_GREETER=lightdm-gtk-greeter
    fi
    


    
    
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        if [[ $DESKTOP_ENV == "" ]]; then
            break
        elif [[ $DESKTOP_ENV == KDE ]] || [[ $DESKTOP_ENV == LXQT ]]; then
            octopi
            if [[ $BOOL_OCTOPI == TRUE ]] || [[ $BOOL_OCTOPI == FALSE ]]; then
                break
            fi
        else
            clear
            echo Do you want to install pacman \(pacman in gui form made in gtk+/vala\) \[Y/N\]?
            local pamacYN
            read pamacYN
            if [[ $pamacYN == Y ]]; then
                BOOL_PAMAC=TRUE
                break
            elif [[ $pamacYN == N ]]; then
                BOOL_PAMAC=FALSE
                break
            else
                echo Please enter a valid answer
                read
            fi
        fi
    done
    
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local plymouthYN
        echo Do you want to install Plymouth? \(A boot-screen/boot-splash\) \[Y/N\]
        read plymouthYN
        if [[ $plymouthYN == Y ]]; then
            BOOL_PLYMOUTH=TRUE
            PLYMOUTH_THEME=SPINFINITY
            PLYMOUTH_VARIANT=-legacy
            break
        elif [[ $plymouthYN == N ]]; then
            BOOL_PLYMOUTH=FALSE
            break
        else
            echo Please enter a valid answer
            read
        fi
    done
    
    
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        local MorePKGSYN
        echo Do you want to add more packages after install? \[Y/N\]
        read MorePKGSYN
        if [[ $MorePKGSYN == TRUE ]]; then
            PConfPKGS
        fi
    done
}



##Post config
if [[ $BOOL_AUTOINST == FALSE ]]; then
    BOOL_MENUCOMPLETE=FALSE
    while [[ $BOOL_MENUCOMPLETE == FALSE ]]; do
        clear
        echo Do you want to use a wizard to setup post-install, or just choose the applications? \[Y/N\]
        read temp_postconfig
        if [[ $temp_postconfig == Y ]]; then
            PConfWiz
            break
        elif [[ $temp_postconfig == N ]]; then
            break
        else
            echo Please enter a valid answer \[Y/N\]
            read
        fi
    done
fi

####end of Config Section [Todo Commenting]
####Installation Section

if [[ $UEFI == 1 ]] || [[ $UEFI == 0 && $BOOL_BIOS_GPT == TRUE ]]; then #To check if the user wants gpt instead of mbr (Required for UEFI, an option for BIOS)
    parted $DEVICE mklabel gpt yes
    DEVICE_PARTITION_TABLE=gpt
else #Default option for BIOS
    parted $DEVICE mklabel msdos yes
    DEVICE_PARTITION_TABLE=msdos
fi
if [[ $UEFI == 0 && $BOOL_BIOS_GPT == TRUE ]]; then #IF the system is a BIOS and formated with GPT create the GRUB partition for BIOS/GPT
    parted $DEVICE mkpart primary ext2 1M 2M
    parted $DEVICE set 1 bios_grub on
else
    parted $DEVICE mkpart primary fat32 2M 512M #[Todo] Have this only be fat32 on UEFI/GPT 
    DEVICE_BOOT=${DEVICE}1
    if [[ $UEFI == 0 ]]; then
        parted $DEVICE set 1 boot on
    fi
fi

parted $DEVICE mkpart primary linux-swap 513M $TOTAL_RAM #Create the swap to total size - 513MB ||| [Todo] $TOTAL_RAM + 513M
DEVICE_SWAP=${DEVICE}2
parted $DEVICE mkpart primary ext4 $TOTAL_RAM 100% #Create the main ROOT partition (No /home parition created with this script [Todo] with autoinst script)
DEVICE_ROOT=${DEVICE}3

##Create partitions sub-section
if [[ $TRIM == 1 ]]; then temptrimcommand="-E discard"; fi #Give a trim command if trim is enabled
mkswap $DEVICE_SWAP
swapon $DEVICE_SWAP
if [[ $UEFI == 1 ]] || [[ $DEVICE_BOOT != "" ]]; then mkfs.fat -F32 $DEVICE_BOOT; fi #If you have a UEFI system or have created a boot parition then format the boot partition
mkfs --type=$FORMAT_ROOT_TYPE $DEVICE_ROOT $temptrimcommand <<EOF #format ROOT to a specified type, and use the trim command from earlier if enabled.
y
EOF
#EOF to stop keyboard input being required

mount $DEVICE_ROOT /mnt
if [[ $DEVICE_BOOT != "" ]]; then #If you have a Boot partition then mount it
    mkdir /mnt/boot
    mount $DEVICE_BOOT /mnt/boot
fi

pacstraptodo="base base-devel $networkman grub os-prober efibootmgr dosfstools dkms" #[Todo] fix this section
if [[ $LTS == TRUE ]]; then
    pacstraptodo="$pacstraptodo linux-lts linux-lts-headers" #Install long term support Linux
else
    pacstraptodo="$pacstraptodo linux-headers" #Install Regular Linux
fi

pacstrap /mnt $pacstraptodo #Starts install process


if [[ ! $language == en_US ]]; then echo $language.UTF-8 UTF-8 >> /mnt/etc/locale.gen; fi #For any language other than US, set that language to be generated
echo en_US.UTF-8 UTF-8 >> /mnt/etc/locale.gen #Set the US language to be generated

arch-chroot /mnt locale-gen #Generate lanuages

echo LANG=$language > /mnt/etc/locale.conf #Set language
echo KEYMAP=$keymap > /mnt/etc/vconsole.conf #Set keymap ||| [Todo] Fix this


arch-chroot /mnt ln -s /usr/share/zoneinfo/$timezone /etc/localtime #Set timezone
arch-chroot /mnt hwclock --$hwclockvar --systohc #Set CMOS clock

# |||
# VVV set hostname for machine
echo $hostname > /mnt/etc/hostname 
arch-chroot /mnt sed -i '/127.0.0.1/s/$/ '${hostname}'/' /etc/hosts
arch-chroot /mnt sed -i '/::1/s/$/ '${hostname}'/' /etc/hosts


if [[ $LTS == TRUE ]]; then
    arch-chroot /mnt pacman -Rs --noconfirm linux #For version linux is not required as it's provided in linux-lts
    arch-chroot /mnt mkinitcpio -p linux-lts #Build linux-lts initramfs
else
    arch-chroot /mnt mkinitcpio -p linux #Build regular linux initramfs
fi

if [[ $UEFI == 1 ]]; then #For UEFI systems install grub in UEFI mode
    arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=arch
    if [[ -n $(dmidecode --type 1 | grep VirtualBox) ]]; then
        mkdir /mnt/boot/EFI/BOOT
        cp /mnt/boot/EFI/arch/grubx64.efi /mnt/boot/EFI/BOOT/BOOTX64.efi
        cp /mnt/boot/EFI/arch/grubia32.efi /mnt/boot/EFI/BOOT/bootia32.efi
    fi
else
    arch-chroot /mnt grub-install --target=i386-pc $DEVICE #For BIOS systems install grub in BIOS mode
fi
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg #Setup grub config

arch-chroot /mnt passwd <<EOF #Setup password for root
$password
$password
EOF
#EOF is to stop the requirement of user input

if [[ $networkman == networkmanager ]]; then arch-chroot /mnt systemctl enable NetworkManager; else; arch-chroot /mnt systemctl enable $networkman; fi #Enable networkmanager for first boot ||| [Todo] fix NetworkManager support etc.

#arch-chroot /mnt systemctl enable $networkman

#[Todo] Finish commenting

ARCHI=`uname -m` #Architecture

if [[ $ARCHI == x86_64 ]]; then
    _has_multilib=`grep -n "\n[multilib\]" /etc/pacman.conf | cut -f1 -d:`
    if [[ -z $_has_multilib ]]; then
        echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
        echo -e "\nMultilib repository added to pacman.conf"
    else
        sed -i "${_has_multilib}s/^#//" /etc/pacman.conf
        _has_multilib=$(( ${_has_multilib} + 1 ))
        sed -i "${_has_multilib}s/^#//" /etc/pacman.conf
    fi
fi ##Copied from helmuthdu/aui
arch-chroot /mnt useradd -m -G wheel -s /bin/bash $user
arch-chroot /mnt passwd $user <<EOF
$password
$password
EOF
sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /mnt/etc/sudoers
TEMPADDEDTOPOSTINST=
TEMPADDEDAUR=
BOOL_UBUNTUCONF=FALSE
if [[ $BOOL_BASICSETUP == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST bc rsync mlocate bash-completion pkgstats ntp zip unzip unrar p7zip lzop cpio avahi nss-mdns alsa-utils alsa-plugins pulseaudio pulseaudio-alsa ntfs-3g dosfstools exfat-utils f2fs-tools fuse fuse-exfat autofs"; fi
if [[ $BOOL_BASICSETUP == TRUE ]] && [[ $ARCH == x86_64 ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST lib32-alsa-plugins lib32-libpulse"; fi
if [[ $BOOL_SSH == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST openssh"; fi
if [[ $BOOL_NFS == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST nfs-utils"; fi
if [[ $BOOL_SAMBA == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST samba smbnetfs"; fi
if [[ $FONTCONFIG == NORM ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST cairo fontconfig freetype2"; fi
if [[ $FONTCONFIG == INF ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST infinality-bundle"
if [[ $FONTCONFIG == INF ]] && [[ $ARCH == x86_64 ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST infinality-bundle-multilib"; fi
if [[ $FONTCONFIG == UBUNTU ]]; then BOOL_UBUNTUCONF=TRUE; fi
if [[ $BOOL_XORG == TRUE ]]; then
    TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST xorg-server xorg-server-utils xorg-server-xwayland xorg-xinit xorg-xkill xf86-input-synaptics xf86-input-mouse xf86-input-keyboard xf86-input-wacom xf86-input-libinput mesa"
    _vga=`lspci | grep VGA | tr "[:upper:]" "[:lower:]"`
    _vga_length=`lspci | grep VGA | wc -l`
    pacstrap /mnt dmidecode
    pacman --noconfirm -S dmidecode
    if [[ -n $(dmidecode --type 1 | grep VirtualBox) ]]; then
    #VBOX
    arch-chroot /mnt pacman --noconfirm -S --needed virtualbox-guest-utils mesa-libgl virtualbox-guest-dkms
    if [[ ${ARCHI} == x86_64 ]]; then arch-chroot /mnt pacman --noconfirm -S --needed lib32-mesa-libgl;fi
    arch-chroot /mnt gpasswd -a $user vboxsf
    #arch-chroot /mnt systemctl diable ntpd
    arch-chroot /mnt systemctl enable vboxservice
    elif [[ $_vga_length -eq 2 ]] && [[ -n $(echo ${_vga} | grep "nvidia") || -f /sys/kernel/debug/dri/0/vbios.rom ]]; then
    #NVidia bumblebee
    arch-chroot /mnt pacman --noconfirm -S --needed xf86-video-intel bumblebee nvidia
    [[ ${ARCHI} == x86_64 ]] && arch-chroot /mnt pacman --noconfirm -S --needed lib32-nvidia-utils
    replace_line '*options nouveau modeset=1' '#options nouveau modeset=1' /mnt/etc/modprobe.d/modprobe.conf
    replace_line '*MODULES="nouveau"' '#MODULES="nouveau"' /mnt/etc/mkinitcpio.conf
    arch-chroot /mnt mkinitcpio -p linux
    arch-chroot /mnt mkinitcpio -p linux-lts
    arch-chroot /mnt gpasswd -a $user bumblebee
    elif [[ -n $(echo ${_vga} | grep "nvidia") || -f /sys/kernel/debug/dri/0/vbios.rom ]]; then
    #Nvidia (Proprietary)
    arch-chroot /mnt pacman --noconfirm -S --needed libva-vdpau-driver nvidia nvidia-utils
    [[ ${ARCHI} == x86_64 ]] && arch-chroot /mnt pacman --noconfirm -S --needed lib32-nvidia-utils
    replace_line '*options nouveau modeset=1' '#options nouveau modeset=1' /mnt/etc/modprobe.d/modprobe.conf
    replace_line '*MODULES="nouveau"' '#MODULES="nouveau"' /mnt/etc/mkinitcpio.conf
    arch-chroot /mnt mkinitcpio -p linux
    arch-chroot /mnt mkinitcpio -p linux-lts
    arch-chroot /mnt nvidia-xconfig --add-arg-glx-visuals --allow-glx-with-composite --composite -no-logo --render-accel -o /etc/X11/xorg.conf.d/20-nvidia.conf;
    echo export LIBVA_DRIVER_NAME=vdpau >> /mnt/etc/profile
    elif [[ -n $(echo ${_vga} | grep "advanced micro devices" || -f /sys/kernel/debug/dri/0/radeon_pm_info || -f /sys/kernel/debug/dri/0/radeon_sa_info ]]; then
    #AMD/ATI
    [[ -f /mnt/etc/X11/xorg.conf.d/20-radeon.conf ]] && rm /etc/X11/xorg.conf.d/20-radeon.conf
    [[ -f /mnt/etc/modules-load.d/catalyst.conf ]] && rm /etc/modules-load.d/catalyst.conf
    [[ -f /mnt/etc/X11/xorg.conf ]] && rm /etc/X11/xorg.conf
    arch-chroot /mnt pacman --noconfirm -S --needed xf86-video-ati mesa-libgl mesa-vdpau libva-vdpau-driver
    echo export LIBVA_DRIVER_NAME=vdpau >> /mnt/etc/profile
    if [[ ${ARCHI} == x86_64 ]]; then arch-chroot /mnt pacman --noconfirm -S --needed lib32-mesa-vdpau;fi
    if [[ ${ARCHI} == x86_64 ]]; then arch-chroot /mnt pacman --noconfirm -S --needed lib32-mesa-libgl;fi
    elif [[ -n $(echo ${_vga} | grep "intel corporation") || -f /sys/kernel/debug/dri/0/i915_capabilities ]]; then
    #Intel
    arch-chroot /mnt pacman --noconfirm -S --needed xf86-video-intel mesa-libgl libva-intel-driver
    if [[ ${ARCHI} == x86_64 ]]; then arch-chroot /mnt pacman --noconfirm -S --needed lib32-mesa-libgl;fi
    else
    #VESA
    arch-chroot /mnt pacman --noconfirm -S --needed xf86-video-vesa mesa-libgl libva-vdpau-driver
    if [[ ${ARCHI} == x86_64 ]]; then arch-chroot /mnt pacman --noconfirm -S --needed lib32-mesa-libgl;fi
    echo export LIBVA_DRIVER_NAME=vdpau >> /mnt/etc/profile
    fi
    
fi



if [[ $BOOL_CUPS == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST cups cups-filters ghostscript gsfonts gutenprint foomatic-db foomatic-db-engine foomatic-db-nonfree foomatic-filters hplip splix cups-pdf system-config-printer"; fi

if [[ $LOCALE == pt_BR || $LOCALE == en_GB || $LOCALE == zn_CN ]]; then
    LOCALE_KDE=`echo $LOCALE | tr '[:upper:]' '[:lower:]'`
elif [[ $LOCALE == en_US ]]; then
    LOCALE_KDE="en_gb"
else
    LOCALE_KDE=`echo $LOCALE | cut -d\_ -f1`
fi

#DESKTOPENV
if [[ $DESKTOP_ENV == Cinnamon ]] && [[ $BOOL_XORG == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST cinnamon nemo-fileroller nemo-preview"; fi
if [[ $DESKTOP_ENV == Enlightenment ]] && [[ $BOOL_XORG == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST enlightenment terminology leafpad epdfview lxappearance"; fi
if [[ $DESKTOP_ENV == GNOME ]] && [[ $BOOL_XORG == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST gnome gnome-extra telepathy gedit-plugins gpaste gnome-tweak-tool gnome-power-manager gucharmap gvfs-goa deja-dup"; fi
if [[ $DESKTOP_ENV == KDE ]] && [[ $BOOL_XORG == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST plasma kde-applications-meta kde-meta-kdenetwork kde-meta-kdeutils kde-l10n-$LOCALE_KDE sddm kio-mtp"; fi
if [[ $DESKTOP_ENV == LXDE ]] && [[ $BOOL_XORG == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST lxde leafpad obconf epdfview"; fi
if [[ $DESKTOP_ENV == LXQT ]] && [[ $BOOL_XORG == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST lxqt openbox oxygen-icons qtcurve leafpad epdfview kio-mtp"; fi
if [[ $DESKTOP_ENV == MATE ]] && [[ $BOOL_XORG == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST mate mate-extra"; fi
if [[ $DESKTOP_ENV == XFCE ]] && [[ $BOOL_XORG == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST xfce4 xfce4-goodies xarchiver mupdf"; fi
if [[ $DESKTOP_ENV == Awesome ]] && [[ $BOOL_XORG == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST awesome lxappearance leafpad epdfview nitrogen"; fi
if [[ $DESKTOP_ENV == Fluxbox ]] && [[ $BOOL_XORG == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST fluxbox menumaker lxappearance leafpad epdfview"; fi
if [[ $DESKTOP_ENV == i3 ]] && [[ $BOOL_XORG == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST i3 dmenu"; fi
if [[ $DESKTOP_ENV == Openbox ]] && [[ $BOOL_XORG == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST openbox obconf obmenu menumaker lxappearance leafpad epdfview nitrogen"; fi
if [[ $DESKTOP_ENV == Xmonad ]] && [[ $BOOL_XORG == TRUE ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST xmonad xmonad-contrib"; fi

if [[ $DESKTOP_ENV != KDE ]] && [[ $DESKTOP_ENV != LXQT ]]; then TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST gvfs gvfs-mtp gvfs-afc gvfs-gogle xdg-user-dirs pavucontrol ttf-bitstream-vera ttf-dejavu gnome-defaults-list"; fi
TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST $DISPLAY_MAN $DISPLAY_MAN_GREETER"
TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST wxgtk2.8"
TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST git"
TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST yajl rsync"
TEMPADDEDTOPOSTINST="$TEMPADDEDTOPOSTINST $CUSTOMPKGS"


if [[ $BOOL_PAMAC == TRUE ]]; then TEMPADDEDAUR="$TEMPADDEDAUR pamac"; fi
if [[ $BOOL_OCTOPI == TRUE ]]; then TEMPADDEDAUR="$TEMPADDEDAUR octopi"; fi
if [[ $BOOL_PLYMOUTH == TRUE ]]; then 
TEMPADDEDAUR="$TEMPADDEDAUR plymouth"
TEMPADDEDAUR="$(TEMPADDEDAUR)$PLYMOUTH_VARIANT"
fi
if [[ $BOOL_XORG == TRUE ]] && [[ $DISPLAY_MAN != "" ]]; then arch-chroot /mnt systemctl enable $DISPLAY_MAN;fi

mkdir -p /mnt/home/$user/.compose-cache
pacstrap /mnt $TEMPADDEDTOPOSTINST
arch-chroot /mnt useradd tempuser
cp /mnt/etc/sudoers /mnt/etc/sudoers.bak
echo "tempuser ALL=(ALL) NOPASSWD: ALL" >> /mnt/etc/sudoers
arch-chroot /mnt su tempuser <<EOF
mkdir /tmp
mkdir /tmp/tempuser
cd /tmp/tempuser
git clone https://aur.archlinux.org/package-query.git
git clone https://aur.archlinux.org/yaourt.git
cd ./package-query
makepkg -sci
cd ../yaourt
makepkg -sci
cd ..
rm -R ./package-query
rm -R ./yaourt
yaourt --noconfirm -S $TEMPADDEDAUR
if [[ $BOOL_PlYMOUTH == TRUE ]]; then
    sed -e "s/ autodetect/ plymouth autodetect/" /etc/mkinitcpio.conf /etc/mkinitcpio.conf
    sed -e 's/GRUB_CMDLINE_LINUX_DEFAULT="quiet"/GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"/' /etc/default/grub /etc/default/grub
    grub-mkconfig -o /boot/grub/grub.cfg
    plymouth-set-default-theme -R $PLYMOUTH_THEME
fi
EOF
umount -R /mnt/boot
umount -R /mnt
swapoff $DEVICE_SWAP
clear
echo If you do not want to restart please press CTRL + C now to cancel rebooting
sleep 10
reboot
